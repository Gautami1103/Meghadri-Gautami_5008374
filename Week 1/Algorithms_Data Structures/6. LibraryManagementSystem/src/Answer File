1.	Understand Search Algorithms:
    o	Explain linear search and binary search algorithms.
Ans: * Linear Search:
    Description: Linear search, also known as sequential search, involves checking each element in a list one by one until
    the target element is found or the end of the list is reached.
    Time Complexity:
    Best Case: O(1)
    Average Case: O(n) (where n is the number of elements)
    Worst Case: O(n)
    Space Complexity: O(1)

     * Binary Search:
    Description: Binary search is an efficient algorithm that repeatedly divides a sorted list in half until the target
    element is found or the search range is empty. It requires that the list be sorted.
    Time Complexity:
    Best Case:O(1)
    Average Case: O(logn)
    Worst Case: O(logn)
    Space Complexity: O(1)

4.	Analysis:
    o	Compare the time complexity of linear and binary search.
Ans: -> Linear Search:
    Time Complexity: O(n)
    Space Complexity: O(1)
    Suitable for small or unsorted data sets where sorting is not feasible or required.

     -> Binary Search:
    Time Complexity: O(logn)
    Space Complexity: O(1) (iterative) or O(logn) (recursive)
    Suitable for large, sorted data sets where the overhead of maintaining order is acceptable.

o	Discuss when to use each algorithm based on the data set size and order.
Ans: * Linear Search:
    Use When: The list is unsorted or small, and sorting the list is not practical. Also useful for cases where search
        needs to be done frequently and the overhead of sorting is too high.
    Advantages: Simplicity and no requirement for the data to be sorted.

     * Binary Search:
    Use When: The list is sorted or can be sorted. Ideal for large lists where frequent searches are performed.
    Advantages: More efficient with large data sets due to O(log n) time complexity. Requires maintaining order, which might
        involve additional overhead
